// automatically generated by the FlatBuffers compiler, do not modify

package com.msa.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Chunk extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_11_1(); }
  public static Chunk getRootAsChunk(ByteBuffer _bb) { return getRootAsChunk(_bb, new Chunk()); }
  public static Chunk getRootAsChunk(ByteBuffer _bb, Chunk obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Chunk __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte buffer(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int bufferLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector bufferVector() { return bufferVector(new ByteVector()); }
  public ByteVector bufferVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer bufferAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer bufferInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }

  public static int createChunk(FlatBufferBuilder builder,
      int bufferOffset) {
    builder.startTable(1);
    Chunk.addBuffer(builder, bufferOffset);
    return Chunk.endChunk(builder);
  }

  public static void startChunk(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addBuffer(FlatBufferBuilder builder, int bufferOffset) { builder.addOffset(0, bufferOffset, 0); }
  public static int createBufferVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createBufferVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startBufferVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endChunk(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Chunk get(int j) { return get(new Chunk(), j); }
    public Chunk get(Chunk obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}


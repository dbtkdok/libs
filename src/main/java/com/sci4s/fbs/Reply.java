// automatically generated by the FlatBuffers compiler, do not modify

package com.sci4s.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Reply extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_11_1(); }
  public static Reply getRootAsReply(ByteBuffer _bb) { return getRootAsReply(_bb, new Reply()); }
  public static Reply getRootAsReply(ByteBuffer _bb, Reply obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Reply __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int length() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createReply(FlatBufferBuilder builder,
      int length,
      int nameOffset) {
    builder.startTable(2);
    Reply.addName(builder, nameOffset);
    Reply.addLength(builder, length);
    return Reply.endReply(builder);
  }

  public static void startReply(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addLength(FlatBufferBuilder builder, int length) { builder.addInt(0, length, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static int endReply(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Reply get(int j) { return get(new Reply(), j); }
    public Reply get(Reply obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

